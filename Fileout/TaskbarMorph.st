'From Pharo8.0.0 of 19 March 2019 [Build information: Pharo-8.0.0+build.156.sha.0d724e323c1ca6b893070484de6c834907a58254 (64 Bit)] on 21 March 2019 at 8:11:32.241341 pm'!Morph subclass: #TaskbarMorph	instanceVariableNames: 'tasks orderedTasks'	classVariableNames: 'MaximumButtons ShowTaskbar ShowWindowPreview'	poolDictionaries: ''	category: 'Morphic-Widgets-Taskbar'!!TaskbarMorph commentStamp: '' prior: 0!Themed synchronous taskbar (not using #step to poll windows). The buttons provide visual feedback as to whether a window is active or minimised (collapsed) plus a popup menu with options to restore, minimise, maximise and close the associated window. Optional (via settings) preview of the window while mouse is over a taskbar button.!!TaskbarMorph methodsFor: 'accessing'!tasks	"Answer the value of tasks"	^ tasks! !!TaskbarMorph methodsFor: 'accessing'!orderedTasks: anObject	"Set the value of orderedTasks"	orderedTasks := anObject! !!TaskbarMorph methodsFor: 'accessing'!tasks: anObject	"Set the value of tasks"	tasks := anObject! !!TaskbarMorph methodsFor: 'accessing'!orderedTasks	"Answer the value of orderedTasks"	^ orderedTasks! !!TaskbarMorph methodsFor: 'accessing'!wantsToBeTopmost	"Answer if the receiver want to be one of the topmost	objects in its owner."		^ true! !!TaskbarMorph methodsFor: 'private - accessing'!edgeToAdhereTo	"Must implement. Answer #bottom."		^#bottom! !!TaskbarMorph methodsFor: 'testing'!isTaskbar	"Answer true."	^true! !!TaskbarMorph methodsFor: 'testing'!isAdheringToBottom	"Must implement. Answer true."		^true! !!TaskbarMorph methodsFor: 'testing'!isAdheringToTop	"Must implement. Answer false."		^false! !!TaskbarMorph methodsFor: 'testing'!isAdheringToRight	"Must implement. Answer false."		^false! !!TaskbarMorph methodsFor: 'testing'!isAdheringToLeft	"Must implement. Answer false."		^false! !!TaskbarMorph methodsFor: 'testing'!isDockingBar	"Answer yes so we get updated when the Display is resized."	^true! !!TaskbarMorph methodsFor: 'change reporting'!displayExtentChanged	self updateBounds! !!TaskbarMorph methodsFor: 'change reporting'!ownerChanged	"The receiver's owner has changed its layout.	Since this method is called synchronously in the	ui, delete the receiver if there are any excpetions."		self owner ifNil: [^self].	[self updateBounds.	self updateTasks]		on: Exception		do: [:ex | self delete. ex pass].	super ownerChanged! !!TaskbarMorph methodsFor: 'setting'!showWindowPreview	^ self class showWindowPreview! !!TaskbarMorph methodsFor: 'as yet unclassified' stamp: 'VB 3/21/2019 19:34'!updateOrderedTasksFrom: tasksThatShouldBeUpdated	| deadTasks |	deadTasks := OrderedCollection new.	self orderedTasks		do: [ :aTaskbarTask | 			tasksThatShouldBeUpdated				detect:					[ :aTaskThatShouldBeUpdated | aTaskThatShouldBeUpdated morph = aTaskbarTask morph ]				ifFound: [ :foundTask | tasksThatShouldBeUpdated remove: foundTask ]				ifNone: [ deadTasks add: aTaskbarTask ] ].	(deadTasks isEmpty and: [ tasksThatShouldBeUpdated isEmpty ])		ifTrue: [ ^ self ].	self orderedTasks: (self orderedTasks 		removeAll: deadTasks;		addAll: tasksThatShouldBeUpdated;		yourself)! !!TaskbarMorph methodsFor: 'wiw support'!morphicLayerNumber	"Helpful for ensuring some morphs always appear in front of or 	behind others. Smaller numbers are in front"		^11! !!TaskbarMorph methodsFor: 'private - layout'!updateBounds	"Update the receiver's bounds to fill the world."	self		width: self owner width;		snapToEdgeIfAppropriate! !!TaskbarMorph methodsFor: 'taskbar'!buttonForMorph: aMorph	"Answer the button corresonding to the given	morph or nil if none."		|index|	index := (self orderedTasks collect: [:t | t morph]) indexOf: aMorph.	^index = 0 ifTrue: [nil] ifFalse: [self submorphs at: index ifAbsent: []]! !!TaskbarMorph methodsFor: 'taskbar'!removeFromWorld	"Delete the receiver from its world after restoring minimized tasks.	Collapse those that were minimized after removal.	Turn window animation off for the duration."	|mins animation|	mins := self tasks select: [:t | t isMinimized].	animation := self theme settings animationSettings useAnimation.	animation ifTrue: [self theme settings animationSettings useAnimation: false].	[mins do: [:t | t morph restore; resetCollapsedFrame].	self delete.	mins do: [:t | t morph minimize]]		ensure: [animation ifTrue: [self theme settings animationSettings useAnimation: true]]! !!TaskbarMorph methodsFor: 'taskbar'!taskOf: aMorph	"Answer the task of the given morph or nil if none."	^self orderedTasks detect: [:t | t morph = aMorph] ifNone: []! !!TaskbarMorph methodsFor: 'taskbar' stamp: 'VB 3/21/2019 19:26'!updateTasks	"Check for changes in the world's submorphs.	Note that if the task attributes change then a	task will be considered dead along with a new replacement."	| wm deadTasks newTasks taskbarTasksFromWorldMorph |	wm := self worldMorphs asOrderedCollection.	taskbarTasksFromWorldMorph := (wm collect: [ :m | m taskbarTask ])		reject: [ :m | m isNil ].	self tasks: taskbarTasksFromWorldMorph.	deadTasks := self orderedTasks difference: self tasks.	newTasks := self tasks difference: self orderedTasks.	(newTasks isEmpty and: [ deadTasks isEmpty ])		ifTrue: [ ^ self ].	"no changes"	newTasks copy		do: [ :t | 			self orderedTasks				detect: [ :ot | ot morph = t morph ]				ifFound: [ :ot | 					self orderedTasks replaceAll: ot with: t.					deadTasks remove: ot.					newTasks remove: t ] ].	"replace in order any changed tasks."	self orderedTasks		removeAll: deadTasks;		addAll: newTasks reversed.	self updateTaskButtons.	self		defer: [ "may have a different number of rows" self layoutChanged ]! !!TaskbarMorph methodsFor: 'taskbar'!worldMorphs	"Answer the world's submorphs plus those in hand.	Nasty case since hand removes the morph before dropping"		^self world submorphs, 		((self tasks			select: [:t | t morph owner = self world activeHand])			collect: [:t | t morph])! !!TaskbarMorph methodsFor: 'taskbar'!indicateModalChildForMorph: aMorph	"Flash the button corresonding to the given morph ."		(self buttonForMorph: aMorph) ifNotNil: [:b |		b indicateModalChild]! !!TaskbarMorph methodsFor: 'taskbar'!taskButtonOf: aMorph	"Answer the task button of the given morph or nil if none."	^self submorphs detect: [:t | t model = aMorph] ifNone: []! !!TaskbarMorph methodsFor: 'drawing'!clipSubmorphs 	^ true! !!TaskbarMorph methodsFor: 'initialization'!intoWorld: aWorld	"Stick to the bottom left now."		self		setToAdhereToEdge: #bottomLeft;		updateBounds.	super intoWorld: aWorld! !!TaskbarMorph methodsFor: 'initialization'!initializeLayout	"Initialize the layout."	self		changeTableLayout;		layoutInset: 2;		cellInset: 2;		listDirection: #leftToRight;		wrapDirection: #topToBottom;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		extent: self minimumExtent! !!TaskbarMorph methodsFor: 'initialization'!initialize	"Initialize the receiver."	super initialize.	self		initializeLayout;		initializeAppearance;		tasks: #();		orderedTasks: OrderedCollection new! !!TaskbarMorph methodsFor: 'initialization'!initializeAppearance	"Initialize the appearance."	self		color: (self theme textColor alpha: 0.3);		fillStyle: (self theme taskbarFillStyleFor: self)! !!TaskbarMorph methodsFor: 'theme'!preferredButtonCornerStyle	"Answer the preferred button corner style	for submorphs."	^#square! !!TaskbarMorph methodsFor: 'theme'!themeChanged	"The theme has changed. Update our appearance."	self initializeAppearance.	self removeAllMorphs.	super themeChanged.	self updateTaskButtons! !!TaskbarMorph methodsFor: 'private'!updateTaskButtons	"Make buttons for the ordered tasks."		| oldButtons size |	oldButtons := self submorphs copy.	self removeAllMorphs.	self defer: [oldButtons do: [:b | b model: nil]]. "release dependency after event handling"		size := self orderedTasks size.	(self orderedTasks copyFrom: ( size - self class maximumButtons + 1 max: 1 ) to: size) do: [:t | | button |		button := t taskbarButtonFor: self.		button ifNotNil: [self addMorphBack: button]]! !!TaskbarMorph methodsFor: 'event handling'!handlesMouseDown: evt	"Best to say we will to avoid being grabbed."		^true! !!TaskbarMorph methodsFor: 'geometry'!minimumExtent	"Answer the minimum extent."	^40@25! !!TaskbarMorph methodsFor: 'recategorized'!rejectsEvent: anEvent	(anEvent isMouse and: [ anEvent isMouseDown ]) ifTrue: [ ^ (self submorphs anySatisfy: [ :each | each containsPoint: anEvent cursorPoint ]) not ].		^ super rejectsEvent: anEvent! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TaskbarMorph class	instanceVariableNames: ''!!TaskbarMorph class methodsFor: 'initializing'!initialize	"Initialize the receiver."	self showTaskbarPreferenceChanged! !!TaskbarMorph class methodsFor: 'initializing'!reset	<script>	"Remove the taskbar and add a new one." 		(World submorphs select: [:m | m isKindOf: self])		do: [:tb | tb delete].	World createTaskbarIfNecessary! !!TaskbarMorph class methodsFor: 'setting'!maximumButtons	^ MaximumButtons ifNil: [MaximumButtons := self maximumButtonsDefault]! !!TaskbarMorph class methodsFor: 'setting'!showWindowPreview: aBoolean	ShowWindowPreview := aBoolean! !!TaskbarMorph class methodsFor: 'setting'!taskbarSettingOn: aBuilder	<systemsettings>	(aBuilder setting: #showTaskbar)		target: self;		parent: #morphic;		label: 'Taskbar';		description: 'Whether the world''s taskbar should be shown or not.';		with: [			(aBuilder setting: #showWindowPreview)				label: 'Window preview' ;				description: 'Whether the world''s taskbar buttons should show previews of the associated window while the mouse is over them.'.			(aBuilder setting: #maximumButtons)				label: 'Maximum number of tasks to show';				description: ('By default, the value is ', self maximumButtonsDefault printString).		]! !!TaskbarMorph class methodsFor: 'setting'!showWindowPreview	^ ShowWindowPreview ifNil: [ShowWindowPreview := true]! !!TaskbarMorph class methodsFor: 'setting'!showTaskbar: aBoolean	ShowTaskbar ~= aBoolean		ifTrue: [ShowTaskbar := aBoolean.			self showTaskbarPreferenceChanged]! !!TaskbarMorph class methodsFor: 'setting'!showTaskbarPreferenceChanged	"Add or remove the taskbar as appropriate.	Delegate to the current World."		World showWorldTaskbar:  self showTaskbar! !!TaskbarMorph class methodsFor: 'setting'!maximumButtons: anInteger	(anInteger isKindOf: Integer) ifFalse: [ ^ self ].	anInteger > 0 ifFalse: [ ^ self ].	MaximumButtons := anInteger.! !!TaskbarMorph class methodsFor: 'setting'!showTaskbar	^ ShowTaskbar ifNil: [ShowTaskbar := true]! !!TaskbarMorph class methodsFor: 'setting'!maximumButtonsDefault	^100! !TaskbarMorph initialize!