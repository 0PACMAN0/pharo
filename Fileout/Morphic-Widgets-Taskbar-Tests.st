TestCase subclass: #TaskbarMorphTest	instanceVariableNames: 'taskbar world windows tasks'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets-Taskbar-Tests'!!TaskbarMorphTest commentStamp: '<historical>' prior: 0!A TaskbarMorphTest is a test class for testing the behavior of TaskbarMorph!!TaskbarMorphTest methodsFor: 'mocking taskbar' stamp: 'VB 3/21/2019 18:29'!tasks	^tasks! !!TaskbarMorphTest methodsFor: 'mocking taskbar' stamp: 'VB 3/21/2019 19:24'!orderedTasks: aCollection 	tasks:= aCollection! !!TaskbarMorphTest methodsFor: 'mocking taskbar' stamp: 'VB 3/21/2019 18:53'!newTaskFor: window	^ TaskbarTask		morph: window		state: #aNilState		icon: nil		label: 'a Label'! !!TaskbarMorphTest methodsFor: 'mocking taskbar' stamp: 'VB 3/21/2019 19:22'!updateTasks	| tasksThatShouldBeUpdated  |	tasksThatShouldBeUpdated := windows		collect: [ :window | self newTaskFor: window ].		self updateOrderedTasksFrom: tasksThatShouldBeUpdated	! !!TaskbarMorphTest methodsFor: 'mocking taskbar' stamp: 'VB 3/21/2019 19:24'!orderedTasks	^tasks ! !!TaskbarMorphTest methodsFor: 'mocking world' stamp: 'VB 3/21/2019 18:57'!removeWindow: aMorph 	windows remove: aMorph ! !!TaskbarMorphTest methodsFor: 'mocking world' stamp: 'VB 3/21/2019 18:35'!addWindowToWorld	| morph |	morph := Morph new.	windows add: morph . 	^morph! !!TaskbarMorphTest methodsFor: 'mocking world' stamp: 'VB 3/21/2019 18:44'!putOnTop: aMorph 	windows remove: aMorph.	windows addLast: aMorph! !!TaskbarMorphTest methodsFor: 'mocking world' stamp: 'VB 3/21/2019 18:35'!addWindow	^world addWindowToWorld ! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 19:00'!testWhenRemovingWindowInWorldListTaskListShouldUpdateConsequently	| window1 window2 |	taskbar := self.	world := self.	window1 := world addWindow.	window2 := world addWindow.	taskbar updateTasks.	world removeWindow:  window1.	taskbar updateTasks.	self assert: taskbar tasks size equals: 1.	self assert: taskbar tasks first morph equals: window2.	! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 18:24'!testUpdateEmptyTaskBarWithNewWindow	taskbar := self.	world := self.	world addWindow.	taskbar updateTasks.	self assert: taskbar tasks size equals: 1	! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 18:31'!testUpdateTaskBarShouldContainsTaskbarTasks	taskbar := self.	world := self.	world addWindow.	taskbar updateTasks.	self assert: (taskbar tasks first isKindOf: TaskbarTask)	! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 19:42'!testIfTheTestedMethodIstheSameThatTheOneUsedInProd	self assert: self theMethodInProdThatShouldBeTested bytecode  equals: (self class >> #updateOrderedTasksFrom:) bytecode .! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 18:34'!testUpdateTaskBarShouldContainsTaskbarTasksForEachWindow	| window1 window2 |	taskbar := self.	world := self.	window1 := world addWindow.	window2 := world addWindow.	taskbar updateTasks.	self assert: taskbar tasks first morph equals: window1.	self assert: taskbar tasks second morph equals: window2! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 18:28'!testEmptyTaskBarList	taskbar := self.	world := self.	taskbar updateTasks.	self assert: taskbar tasks size equals: 0	! !!TaskbarMorphTest methodsFor: 'tests' stamp: 'VB 3/21/2019 18:45'!testWhenChangingOrderInWorldListTaskOrderShouldRemains	| window1 window2 |	taskbar := self.	world := self.	window1 := world addWindow.	window2 := world addWindow.	taskbar updateTasks.	world putOnTop: window1.	taskbar updateTasks.	self assert: taskbar tasks first morph equals: window1.	self assert: taskbar tasks second morph equals: window2! !!TaskbarMorphTest methodsFor: 'the real thing - aka: the test subject' stamp: 'VB 3/21/2019 19:42'!theMethodInProdThatShouldBeTested	^ TaskbarMorph >> #updateOrderedTasksFrom:! !!TaskbarMorphTest methodsFor: 'the real thing - aka: the test subject' stamp: 'VB 3/21/2019 19:24'!updateOrderedTasksFrom: tasksThatShouldBeUpdated	| deadTasks |	deadTasks := OrderedCollection new.	self orderedTasks		do: [ :aTaskbarTask | 			tasksThatShouldBeUpdated				detect:					[ :aTaskThatShouldBeUpdated | aTaskThatShouldBeUpdated morph = aTaskbarTask morph ]				ifFound: [ :foundTask | tasksThatShouldBeUpdated remove: foundTask ]				ifNone: [ deadTasks add: aTaskbarTask ] ].	(deadTasks isEmpty and: [ tasksThatShouldBeUpdated isEmpty ])		ifTrue: [ ^ self ].	self orderedTasks: (self orderedTasks 		removeAll: deadTasks;		addAll: tasksThatShouldBeUpdated;		yourself)! !!TaskbarMorphTest methodsFor: 'running' stamp: 'VB 3/21/2019 19:42'!setUp 	super setUp.	windows := OrderedCollection new.	tasks := OrderedCollection new.	self theMethodInProdThatShouldBeTested.! !