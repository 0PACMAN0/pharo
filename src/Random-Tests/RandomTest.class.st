"
SUnit tests for random generator
"
Class {
	#name : #RandomTest,
	#superclass : #ClassTestCase,
	#instVars : [
		'gen'
	],
	#category : #'Random-Tests'
}

{ #category : #coverage }
RandomTest >> classToBeTested [

	^ Random
]

{ #category : #running }
RandomTest >> setUp [
	super setUp.
	gen := Random seed: 112629
]

{ #category : #tests }
RandomTest >> testDistribution [
	| results occurrences generator |
	1 to: 100 do: [ :i |
		results := Bag new.
		generator := Random new seed: 12345678+i.
		2000 timesRepeat: [ results add: (100 atRandom: generator) ].
		occurrences := Array new: 100 streamContents: [ :out |
			results doWithOccurrences: [ :element :occurrence |
				self assert: (element between: 1 and: 100).
				out nextPut: occurrence.
				self assert: (occurrence between: 5 and: 40) ] ].
		self assert: occurrences average equals: 20.
		self assert: occurrences stdev < 10]
]

{ #category : #tests }
RandomTest >> testNext [

	10000 timesRepeat: [
		| next |
		next := gen next.
		self assert: (next >= 0).
		self assert: (next < 1).
	]
]

{ #category : #tests }
RandomTest >> testNextBetweenAnd [

	10000 timesRepeat: [
		| next |
		next := gen nextBetween: -10 and: 5.
		self assert: (next >= -10).
		self assert: (next < 5) ]
]

{ #category : #tests }
RandomTest >> testNextInteger [
	| int |
	int := gen nextInteger: 256.
	self assert: int isInteger.
	self assert: (int between: 1 and: 256)
]

{ #category : #tests }
RandomTest >> testNextIntegerBetweenAnd [

	10000 timesRepeat: [
		| next |
		next := gen nextIntegerBetween: -3 and: 5.
		self assert: next isInteger.
		self assert: (next between: -3 and: 5) ]
]

{ #category : #tests }
RandomTest >> testNextInto [
	| array |
	array := Array new: 8.
	array := gen next: 8 into: array.
	self assert: (array allSatisfy: [ :each | each isFloat and: [ each >= 0 and: [ each < 1 ] ] ])
]

{ #category : #tests }
RandomTest >> testPrimitiveRandomGeneration1 [

	| state results |
	results := OrderedCollection new.

	state := DoubleWordArray new: 1.
	state at: 1 put: 16r4d595df4d0f33173.

	1 to: 100 do: [ :_ |
	results add: (Random primitiveRandomNumber: state) ].

	self
		assert: results asArray
		equals:
			#( 676697322 420258633 1271148530 1448116563 1118307631 257272927
			   1459568178 1330014364 1691133457 544907355 1436966076 1258119840
			   1049240124 2037651542 1789776910 1495445956 986842687 599309513
			   760064988 1572569493 1238309885 1748223913 948841936 863071240
			   1936514842 923246893 629644742 1782740020 773552605 287986548
			   1245148712 1171138885 1019579271 2085735733 1954310128
			   653846946 385723332 1967809638 1982820798 923489414 1178723164
			   980411505 20957116 962888975 1656878063 1905725832 1142216706
			   393041617 1927916011 345454602 1282415273 1786069764 281766158
			   1039660807 464850597 322395481 115123346 919004231 1910668846
			   503157456 1242866781 1728147890 187542155 937084349 1685405769
			   1628197112 803699242 409435699 314154821 1004786800 977271029
			   158036560 1511648256 529677573 1062219010 2029168307 1767518171
			   1657792283 943852200 490115882 739486826 1130696910 1550560909
			   866443372 1209115994 1103774719 1247450518 1840402351 696978445
			   391917972 1102070591 1551438843 1122625291 310891281 249241969
			   1104896869 1722124953 938460893 1317367987 1170516809 )
]

{ #category : #tests }
RandomTest >> testPrimitiveRandomGeneration2 [

	| state results |
	results := OrderedCollection new.

	state := DoubleWordArray new: 1.
	state at: 1 put: 16r977afd8015414a94.

	1 to: 100 do: [ :_ |
	results add: (Random primitiveRandomNumber: state) ].

	self
		assert: results asArray
		equals:
			#( 1123384278 1795671209 1924641435 1143034755 1974427309
			   1757328946 1271345452 1441777623 2062288904 2131966645
			   898244057 1731076225 106581468 2027215766 1693907025 251273835
			   872213210 736288324 449296931 1097054660 1174969416 1493913367
			   727525072 1895983019 2045651843 601924129 790240170 274078875
			   85460756 661429448 1551229168 1346782475 331806902 2001698278
			   1653883637 969082088 58484890 877451631 106813142 879896758
			   1465586082 23970619 222390255 1872327836 132911854 169678554
			   685616442 1905681248 1101299353 543443413 10498198 1567420440
			   8429346 246076037 463063522 1131711124 352105423 1100034716
			   1647334895 972870151 1415116872 419609241 810313841 1259894043
			   1073135744 969363312 1568528795 664453680 1680803242 460188684
			   1401049631 1589666895 324952468 2133811574 2125455444 1469931429
			   387789563 881643062 1751561152 16000064 56618491 1697760127
			   1756201022 566280575 1702381265 413278598 514120285 2138146072
			   1826857778 878121720 1338240606 1068671382 403284681 815313315
			   391109809 395500445 774308967 509549754 1714383213 1069569682 )
]

{ #category : #tests }
RandomTest >> testPrimitiveRandomGeneration3 [

	| state results |
	results := OrderedCollection new.

	state := DoubleWordArray new: 1.
	state at: 1 put: 16re81fbe472905b453.

	1 to: 100 do: [ :_ |
	results add: (Random primitiveRandomNumber: state) ].

	self
		assert: results asArray
		equals:
			#( 528761024 758681390 94083649 1478012613 4088840 1115059306
			   2042779717 622797868 1500616650 928800955 1343423686 1805140938
			   1117901253 1513989040 719521570 30676756 1135651211 1374662617
			   1418604189 1558546178 2036934963 1469788609 1675210031
			   930793618 188772961 1052037711 171052541 2032278908 202403553
			   75708106 1377792829 174288089 201854141 1720608057 1967486854
			   2083579441 490597026 680583225 945560811 507513760 607549553
			   1797866806 203951532 1089672142 554526441 542925352 1915146450
			   1775004195 690648339 364834747 1990327879 1794095924 1442837436
			   1345319037 1596132913 1892584854 560671416 552713900 1293917643
			   666888990 44807431 1819783738 1839492845 1320968634 1233020759
			   1652027798 1666652881 1301878961 1180052126 1862889011
			   103301227 632526271 1366938134 537700714 128954743 1835838196
			   1508177090 855491486 1079141906 826946563 546549715 1068957646
			   1107879981 265164428 2041860109 2064340120 1753621213 430710692
			   678915420 1207248961 611181228 737748018 1662662122 232588994
			   1680756096 364506899 1071187044 1867280958 757845914 973714776 )
]

{ #category : #tests }
RandomTest >> testPrimitiveRandomGeneration4 [

	| state results |
	results := OrderedCollection new.

	state := DoubleWordArray new: 1.
	state at: 1 put: 16re8adc5779db42e9b.

	1 to: 100 do: [ :_ |
	results add: (Random primitiveRandomNumber: state) ].

	self
		assert: results asArray
		equals:
			#( 771710184 1953164226 488841981 289749225 170525166 936237884
			   2127861015 660022562 411571104 1072430581 1300895138 404120654
			   1693461639 1161265675 1159916046 1699383526 590791489 1614792561
			   380847683 946425151 1485116630 592803324 1052103993 270764341
			   416898789 1734527238 2108511623 2015395670 118054803 1165759679
			   875171866 186489425 243817470 416226586 1104201647 1901618852
			   2069864594 623104591 1883005305 1492162720 1621790882 115867491
			   1153712239 1627932490 1174012976 1933964673 50718916 372282173
			   1791395680 16917853 1482549295 2055856276 1105419916 688748746
			   347250337 179760292 746441714 1233355821 1176628523 1777149394
			   1811595180 1071613084 400747376 1479420494 822510662 1136293981
			   348589883 981266437 1654934634 1904093407 28358643 1387644566
			   1514702487 1167643647 1536752962 528921316 1279459800 1135040089
			   1600783281 1238099943 1474569181 321494157 703455202 86225344
			   2071264885 1382839784 2109935752 1119490897 1985674430
			   1699303289 1863896658 874405881 133529688 1659465559 1036352310
			   1884407954 1466309468 1125486836 1808697514 1618305223 )
]

{ #category : #tests }
RandomTest >> testPrimitiveRandomGeneration5 [

	| state results |
	results := OrderedCollection new.

	state := DoubleWordArray new: 1.
	state at: 1 put: 16r39352fc390c369b2.

	1 to: 100 do: [ :_ |
	results add: (Random primitiveRandomNumber: state) ].

	self
		assert: results asArray
		equals:
			#( 911034467 623064739 2069461119 1776170644 2133203577 1730457956
			   324747982 363675164 1904345172 1621255112 1297556496 23505356
			   1355834468 160610595 1617487803 1039549212 1846883319 2010354200
			   476369801 171757954 989848022 1603079100 1314026991 1454207784
			   2078473025 227444708 504950213 1345591439 600653439 449189537
			   324817986 914192558 1239256601 395373279 501565559 256583195
			   715973605 1269777629 314601761 1690741703 155672304 2037828346
			   1973102905 1150196189 546648478 1888933509 521133230 1757563876
			   1339955536 431524952 704934916 1711974879 70559250 1982829667
			   1110020946 1707037755 1973351774 1942247750 1217323071
			   1125713023 1148575093 364025800 2112712187 1191251157 1293701689
			   1325582175 848888591 1835433750 198980106 1331838368 602369642
			   1749496722 1726468786 1537953647 395924263 190370818 949685575
			   1337449940 918067889 2043992072 374792107 865520841 798576892
			   554778780 755314185 616251642 1095303820 1762283268 207097256
			   1698265582 657252139 1166599601 1256604542 1336871508 98506035
			   1267254030 2056734050 1359495350 1088203006 1024528242 )
]

{ #category : #tests }
RandomTest >> testSeedStateGeneration1 [
	
	self assert: (gen state at: 1) equals: 16r2a314bc02ce34e43

	
	
]

{ #category : #tests }
RandomTest >> testSeedStateGeneration2 [
	
	gen seed: 42.
	self assert: (gen state at: 1) equals: 16r977afd8015414a94

	
	
]

{ #category : #tests }
RandomTest >> testSeedStateGeneration3 [
	
	gen seed: 4112000.
	self assert: (gen state at: 1) equals: 16r39352fc390c369b2

	
	
]

{ #category : #tests }
RandomTest >> testUnixRandomGeneratorSeed [
	"the test is very slow on the CI (>2 minutes)"
	self skipOnPharoCITestingEnvironment.
	gen useUnixRandomGeneratorSeed.
	100 timesRepeat: [ | next |
			next := gen next.
			self assert: next >= 0.
			self assert: next < 1 ]
]
